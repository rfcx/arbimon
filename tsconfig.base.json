/*
  Each module should `extend` this base & specify:
  - `include` (not `files`)
  - `references`
  - any needed module-specific overrides

  Visit https://aka.ms/tsconfig.json to read more about this file
*/
{
  // Exclude deps, build artifacts, hidden folders, tests
  "exclude": [
    "node_modules",
    "dist",
    "lib",
    ".*/**",
    "**/*.test.ts",
    "**/*.spec.ts",
    "**/*.mock.ts",
    "**/*.stub.ts"
  ],

  "compilerOptions": {
    /* Language, Target, Environment */
    "baseUrl": "./" /* Specify the base directory to resolve non-relative module names. */,
    "outDir": "dist" /* Specify an output folder for all emitted files. */,
    "lib": [
      "ESNext",
      "DOM"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "module": "ESNext" /* Specify what module code is generated. */,
    "moduleResolution": "Node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "target": "ESNext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,

    "allowSyntheticDefaultImports": false /* Allow 'import x from y' when a module doesn't have a default export. */,
    "esModuleInterop": false /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    "experimentalDecorators": true /* Enable experimental support for TC39 stage 2 draft decorators. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "useDefineForClassFields": true /* Emit ECMAScript-standard-compliant class fields. */,

    /* Build & Emit */
    "assumeChangesOnlyAffectDirectDependencies": true,
    "composite": true /* Enable constraints that allow a TypeScript project to be used with project references. */,
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": true /* Create sourcemaps for d.ts files. */,
    "incremental": true /* Enable incremental compilation */,
    "removeComments": true /* Disable emitting comments. */,
    "skipLibCheck": false /* Skip type checking all .d.ts files. */,
    "sourceMap": true /* Create source map files for emitted JavaScript files. */,

    /* Type Checking */
    "allowUnreachableCode": false /* Disable error reporting for unreachable code. */,
    "allowUnusedLabels": false /* Disable error reporting for unused labels. */,
    "alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
    "exactOptionalPropertyTypes": false, // broke on @types/mysql /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noErrorTruncation": true,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noPropertyAccessFromIndexSignature": false, // Seems undesirable /* Enforces using indexed accessors for keys declared using an indexed type */
    "noUncheckedIndexedAccess": false, // troublesome for array indexing /* Include 'undefined' in index signature results */
    "noUnusedLocals": false, // eslint is smarter; and this doesn't support vue templates /* Enable error reporting when a local variables aren't read. */,
    "noUnusedParameters": false, // eslint is smarter /* Raise an error when a function parameter isn't read */,
    "pretty": true,
    "strict": true /* Enable all strict type-checking options. */,
    "useUnknownInCatchVariables": true /* Type catch clause variables as 'unknown' instead of 'any'. */

    // Unused
    // "tsBuildInfoFile": "./" /* Specify the folder for .tsbuildinfo incremental compilation files. */,
    // "disableSourceOfProjectReferenceRedirect": true /* Disable preferring source files instead of declaration files when referencing composite projects */,
    // "disableSolutionSearching": true /* Opt a project out of multi-project reference checking when editing. */,
    // "disableReferencedProjectLoad": true /* Reduce the number of projects loaded automatically by TypeScript. */,
    // "jsx": "preserve" /* Specify what JSX code is generated. */,
    // "emitDecoratorMetadata": true /* Emit design-type metadata for decorated declarations in source files. */,
    // "jsxFactory": "" /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */,
    // "jsxFragmentFactory": "" /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */,
    // "jsxImportSource": "" /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */,
    // "reactNamespace": "" /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */,
    // "noLib": true /* Disable including any library files, including the default lib.d.ts. */,
    // "rootDir": "src" /* Specify the root folder within your source files. */,
    // "rootDirs": [] /* Allow multiple folders to be treated as one when resolving modules. */,
    // "typeRoots": [] /* Specify multiple folders that act like `./node_modules/@types`. */,
    // "types": [] /* Specify type package names to be included without being referenced in a source file. */,
    // "allowUmdGlobalAccess": true /* Allow accessing UMD globals from modules. */,
    // "resolveJsonModule": true /* Enable importing .json files */,
    // "noResolve": true /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */,
    // "allowJs": true /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */,
    // "checkJs": true /* Enable error reporting in type-checked JavaScript files. */,
    // "maxNodeModuleJsDepth": 1 /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */,
    // "emitDeclarationOnly": true /* Only output d.ts files and not JavaScript files. */,
    // "outFile": "./" /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */,
    // "noEmit": true /* Disable emitting files from a compilation. */,
    // "importHelpers": true /* Allow importing helper functions from tslib once per project, instead of including them per-file. */,
    // "importsNotUsedAsValues": "remove" /* Specify emit/checking behavior for imports that are only used for types */,
    // "downlevelIteration": true /* Emit more compliant, but verbose and less performant JavaScript for iteration. */,
    // "sourceRoot": "" /* Specify the root path for debuggers to find the reference source code. */,
    // "mapRoot": "" /* Specify the location where debugger should locate map files instead of generated locations. */,
    // "inlineSourceMap": true /* Include sourcemap files inside the emitted JavaScript. */,
    // "inlineSources": true /* Include source code in the sourcemaps inside the emitted JavaScript. */,
    // "emitBOM": true /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */,
    // "newLine": "crlf" /* Set the newline character for emitting files. */,
    // "stripInternal": true /* Disable emitting declarations that have `@internal` in their JSDoc comments. */,
    // "noEmitHelpers": true /* Disable generating custom helper functions like `__extends` in compiled output. */,
    // "noEmitOnError": true /* Disable emitting files if any type checking errors are reported. */,
    // "preserveConstEnums": true /* Disable erasing `const enum` declarations in generated code. */,
    // "declarationDir": "./" /* Specify the output directory for generated declaration files. */,
    // "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    // "preserveSymlinks": true /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */,
    // "noImplicitAny": true, // part of strict /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "noImplicitThis": true, // part of strict /* Enable error reporting when `this` is given the type `any`. */
    // "strictBindCallApply": true, // part of strict /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictFunctionTypes": true, // part of strict /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictNullChecks": true, // part of strict /* When type checking, take into account `null` and `undefined`. */
    // "strictPropertyInitialization": true, // part of strict /* Check for class properties that are declared but not set in the constructor. */
    // "skipDefaultLibCheck": true /* Skip type checking .d.ts files that are included with TypeScript. */
  }
}
